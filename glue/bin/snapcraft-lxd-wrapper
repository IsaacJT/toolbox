#!/bin/bash

# set script version, so we have some tracking
LXD_SCRIPT_VERSION="0.1"
IDENTITY_FILE="${HOME}/.ssh/id_rsa-lxd"
PUBLIC_KEY=${IDENTITY_FILE}.pub
SSH_CONFIG="${HOME}/.ssh/config"

print_help_lxd_ensure_container () {
  echo -e "lxd_ensure_container: helper script to ensure lxc container is created and running"
  echo -e "\tusage: lxd_ensure_container <Ubuntu Series> <name of the container to be created> [architecture]"
  echo -e "\n\te.g.  $ lxd_ensure_container focal my-focal"
  echo -e "\n\tarchitecture parameter is optional"
}

print_help_lxd_snapcraft () {
  echo "lxd_snapcraft executes snapcraft in current directory inside defined container"
  echo "name of container is passed through env variable 'snapcraft_lxd_container_name"
  echo "If container name is not defined, new container 'snapcraft-<ubuntu series> is created'"
  echo "Ubuntu series is determined from snapcraft project in current directory"
}

lxd_ensure_ssh_setup () {
  echo "Checking if we have ssh key for lxd containers"
  # get ssh keys ready
  if [ ! -f ${IDENTITY_FILE} ]; then
    ssh-keygen -t rsa -C "${USER}@lxd" -N "" -f ${IDENTITY_FILE}
  fi
  # ensure public key is in authorised_keys
  if [ -z "$(grep "$(cat ${PUBLIC_KEY})" ${HOME}/.ssh/authorized_keys)" ]; then
    # check is thre is new line in authorised keys so we don't mangle last key
    if [ -z "$(tail -c 1 ${HOME}/.ssh/authorized_keys)" ]; then
      cat ${PUBLIC_KEY} >> ${HOME}/.ssh/authorized_keys
    else
      echo >> ${HOME}/.ssh/authorized_keys
      cat ${PUBLIC_KEY} >> ${HOME}/.ssh/authorized_keys
    fi
  fi

  if [ ! -f ${SSH_CONFIG} ] || [ -z "$(grep -Pzo  'Host \*.lxd\n  User ubuntu\n  ProxyCommand lxd-ssh %h\n  StrictHostKeyChecking no\n  IdentityFile ' ${SSH_CONFIG} | tr -d  '\0')" ]; then
    echo -e \
      "\nHost *.lxd\n  User ubuntu\n  ProxyCommand lxd-ssh %h\n  StrictHostKeyChecking no\n  IdentityFile ${IDENTITY_FILE}\n" \
      >> ${SSH_CONFIG}
    chmod 600 ${SSH_CONFIG}
  fi

  # make sure we have lxd-ssh in path
  if [ -z "$(which lxd-ssh)" ];then
    if [ ! -d ~/bin ]; then
      mkdir -p ~/bin
      export PATH=$PATH:${HOME}/bin
    fi
    curl -s https://raw.githubusercontent.com/kubiko/toolbox/master/glue/bin/lxd-ssh > ~/bin/lxd-ssh
    chmod +x ~/bin/lxd-ssh
  fi
}

# ensure lxd is installed
lxd_ensure () {
  # check if lxd is installed
  if [ -z "$(which lxd)" ]; then
    # install and configure lxd
    echo "Installing lxd..."
    snap install lxd
  fi

  # make sure user is in lxd group
  if [ -e /var/lib/extrausers/group ] && [ -z "$(grep lxd:x:999:${USER} /var/lib/extrausers/group)" ]; then
    echo "Adding current user to lxd group"
    sudo sed -i 's|lxd:x:999:.*|lxd:x:999:'"${USER}"'|g' /var/lib/extrausers/group
    echo "Re run last command as user group is going to be reloaded and current shell replaced with new one including lxd group "
    exec sg lxd newgrp `id -gn`
  fi

  # make sure we have configured ssh setup
  lxd_ensure_ssh_setup

  # if lxd is configured bail out here
  if [ -e ~/.lxd-wrapper-configured ]; then
    return 0
  fi

  # make sure lxd is initialised
  local lxd_dump="$(lxd init --dump)"
  if [ -n "$(echo "${lxd_dump}" | grep 'storage_pools: \[\]')" ]; then
    echo "Initialising lxd..."
    lxd init --auto --storage-backend=dir
    echo -e "#cloud-config\nssh_authorized_keys:\n - $(cat ${PUBLIC_KEY})" | lxc profile set default user.user-data -
    lxc profile show default
  elif [ -n "$(echo "${lxd_dump}" | grep $(cat ${PUBLIC_KEY}))" ]; then
    echo -e "#cloud-config\nssh_authorized_keys:\n - $(cat ${PUBLIC_KEY})" | lxc profile set default user.user-data -
  fi
  # touch file to signal lxd was fully configured
  touch ~/.lxd-wrapper-configured
}

lxd_ensure_container_runnig () {
  if [ -z "${1}" ]; then
    echo "Missing container name"
    return 1
  fi
  local container_name="${1}"
  local container_status=$(lxc info ${container_name} 2>&1 | awk '$1 ~ "Status" { print $2}')
  if [ -n "${container_status}" ]; then
    echo -e "Container ${container_name} already exists, making sure it's running"
    if [ "Running" != "${container_status}" ]; then
      return lxc start ${container_name}
    fi
    return 0
  else
    echo "Container with given name does not exist"
    return 1
  fi
}

lxd_ensure_container () {
  # normalise series, we only support UC16/18/20 and related LTS
  # 20.04 -> focal
  # 18.04 -> bionic
  # 16.04 -> xenial
  case $1 in
    20.04 | focal)
      local ubuntu_series="focal"
      ;;
    18.04 | bionic)
      local ubuntu_series="bionic"
      ;;
    16.04 | xenial)
      local ubuntu_series="xenial"
      ;;
    *)
      echo "Unknown Ubuntu version(series)"
      print_help_lxd_ensure_container
      return 1
      ;;
  esac

  if [ -z "${2}" ]; then
    echo "Missing container name"
    print_help_lxd_ensure_container
    return 1
  fi
  local container_name="${2}"

  if lxd_ensure_container_runnig ${container_name}; then
    return "$?"
  fi

  if [ -n "${3}" ]; then
    # create container of defined architecture
    ubuntu_series="${ubuntu_series}/${3}"
  fi

  # container does not exist, create it
  lxc init ubuntu-daily:${ubuntu_series} ${container_name}

  echo "Configuring new container..."
  # override template, as sometimes snapcraft tries to be too smart
  local tmp_sources=$(mktemp -u -q)
  curl -s https://people.canonical.com/~okubik/sources.list.ubuntu.lxd.tmpl > ${tmp_sources}
  lxc file push ${tmp_sources} ${container_name}/etc/cloud/templates/sources.list.ubuntu.tmpl
  [ -e ${tmp_sources} ] && rm ${tmp_sources}
  lxc config set ${container_name} raw.idmap 'both 1000 1000'
  lxc config device add ${container_name} home disk source=$HOME path=/home/ubuntu/host
  lxc config device add ${container_name} sshconf disk source=$HOME/.ssh path=/home/ubuntu/.ssh

  lxc start ${container_name}
  local wait_text="Waiting for container to start.."
  echo -n -e "${wait_text}\r"
  lxc start ${container_name}
  while [ -z "$(lxc list ${container_name} -c 4 --format csv)" ]
  do
      wait_text="${wait_text}."
      echo -n -e "${wait_text}\r"
      sleep 1
  done
  echo -e "${wait_text}..DONE"

  lxc exec ${container_name} -- sh -c 'cp -r /etc/skel/. /home/ubuntu'
  lxc exec ${container_name} -- sh -c 'echo "export SNAPCRAFT_BUILD_ENVIRONMENT=host" >> /etc/environment'
  lxc exec ${container_name} -- sed -i 's|PATH=\"\(.*\)\"|PATH=\"\1\:/snap/bin\"|g' /etc/environment

  # check if we need cross compilation source
  if [ -n "$(uname -a | grep "x86_64")" ]; then
    lxc exec ${container_name} -- sh -c 'dpkg --add-architecture arm64'
    lxc exec ${container_name} -- sh -c 'dpkg --add-architecture armhf'
  fi
  lxc exec ${container_name} -- sh -c 'apt-get update'

  # finishing touches
  lxc exec ${container_name} -- sh -c 'chown ubuntu:ubuntu /home/ubuntu'
  lxc exec ${container_name} -- sh -c 'find /home/ubuntu/ -maxdepth 1 -type f -name ".*" -exec chown ubuntu:ubuntu {} \;'

  # wait till system is seeded to install snapcraft
  wait_text="waiting for container to finish snap seeding"
  while [ -z "$(lxc exec ${container_name} -- sh -c 'systemctl status snapd.seeded.service | grep "Active" | grep "exited"')" ]
  do
      wait_text="${wait_text}."
      echo -n -e "${wait_text}\r"
      sleep 1
  done
  echo -e "${wait_text}..DONE"
  # install snapcraft
  lxc exec ${container_name} -- sh -c 'snap install snapcraft --classic'
}

lxd_snapcraft () {
  if [ -z "${snapcraft_lxd_container_name}" ]; then
    # if there is snapcraft.yaml or snap/snapcraft.yaml
    # try to determine which container to use
    [ -e snapcraft.yaml ] && local SNAPCRAFT_YAML="snapcraft.yaml"
    [ -e snap/snapcraft.yaml ] && local SNAPCRAFT_YAML="snap/snapcraft.yaml"
    if [ -n "${SNAPCRAFT_YAML}" ]; then
      # use build-base and then base as means to determine build series
      base=$(grep 'build-base:' ${SNAPCRAFT_YAML} | awk '{print $2}')
      [ -z "${base}" ] && base=$(grep 'base:' ${SNAPCRAFT_YAML} | awk '{print $2}')
      case ${base} in
        core16|core)
          local container_name="snapcraft-xenial"
          local ubuntu_series="xenial"
          ;;
        core18)
          local container_name="snapcraft-bionic"
          local ubuntu_series="bionic"
          ;;
        core20)
          local container_name="snapcraft-focal"
          local ubuntu_series="focal"
          ;;
        *)
          echo "Base not defined, assuming Core 16"
          local container_name="snapcraft-xenial"
          local ubuntu_series="xenial"
          ;;
      esac
    else
      echo -e "Not in snapcraft project directory, or container name defined\n"
      print_help_lxd_snapcraft
      return 1
    fi
  else
    local container_name="${snapcraft_lxd_container_name}"
  fi
  # check if lxd is installed, if installed assume it's configured as well
  lxd_ensure

  # make sure container is created and running
  if [ -z "${ubuntu_series}" ]; then
    lxd_ensure_container_runnig ${container_name}
  else
    lxd_ensure_container ${ubuntu_series} ${container_name}
  fi

  # run snapcraft command if we have container ready
  if [ "$?" = "0" ]; then
    echo -e "Running snapcraft in \"${container_name}\" container"
    ssh -t -q ${container_name}.lxd "cd $(pwd | sed 's|'"${HOME}"'|/home/ubuntu/host|g'); snapcraft $@"
  else
    return "$?"
  fi
}
